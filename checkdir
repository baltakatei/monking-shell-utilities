#!/bin/bash
# Author: Christopher Lovejoy <c@lovejoy.io>


## PLUMBING:

yell() { echo "$@" >&2; }
die() { yell "$@"; exit 111; }
must() { "$@" || die "cannot $*"; }
whisper() { local volume=$1; shift; [[ $opt_verbose -ge $volume ]] && yell "$@"; }

toLowerCase() {
	#perl -C -lne 'print uc';
	tr '[:upper:]' '[:lower:]';
}
toUpperCase() {
	#perl -C -lne 'print uc';
	tr '[:lower:]' '[:upper:]';
}


## CONST/CONFIGURATION:

if [[ -z "$TMPDIR" || ! -d "$TMPDIR" ]]; then
	if [[ -d '/dev/shm' ]]; then
		export TMPDIR='/dev/shm';
	else
		export TMPDIR="$PWD";
	fi
fi


## DOCUMENTATION:


SCRIPT_USAGE="${0##*/} [OPTIONS] [SUMFILE…]"
SCRIPT_OPTIONS=(
	"--help|help|-h  Show this help."
	"--version       Show the script version."
	"-a              Set encryption algorithm."
	"-e              Only check if files in SUMFILE exist, and output missing filenames."
	"-l              Only output the SUMFILE path found/selected."
	"-v              Show more verbose output."
)
SCRIPT_DESCRIPTION_LINES=(
	"If no SUMFILE is specified, .*SHA256SUM* and *SHA256SUM* is globbed, and the newest one is used."
)
SCRIPT_VERSIONS=(
	"0.0.7 @1670970409  Improve POSIX/BSD portability.  b2sum:db71df2c#l=32;size:4959" #volatile
	"0.0.6 @1670954755  Added option -l to output selected SUM file path.  b2sum:8e5df517#l=32;size:4800" #volatile
	"0.0.5 @1670874600  Allow checking only existence of files from SUMFILE (opt '-e').  b2sum:a4a54a563924caca275b3626734ee015,size:5205" #volatile
	"0.0.4 @1669927062  Detect sum algorithm from sum filename (supported: '*B2*' => b2; all else => sha256)" #volatile
	"0.0.3 @1666205166  BSD/macOS support (Bash 3.2, shasum -a 256). Tests PASS @1666203994 with GNU bash, version 3.2.57(1)-release (x86_64-apple-darwin20)" #volatile
	"0.0.2 @1664215277  Added help." #volatile
	"0.0.1 @1664175524" #volatile
)
SCRIPT_VERSION="${SCRIPT_VERSIONS[0]}"


## METHODS:

showHelp() {
	echo "USAGE: $SCRIPT_USAGE";
	echo "";
	echo "OPTIONS:";
	local opt;
	for opt in "${SCRIPT_OPTIONS[@]}"; do
		echo "  ${opt}"
	done
	echo "";
	echo "DESCRIPTION:";
	for line in "${SCRIPT_DESCRIPTION_LINES[@]}"; do
		echo "  ${line}"
	done
}

confirm() {
	local prompt="$1";
	local answer="$2";
	local REPLY;
	local defaultYes=true
	if [[ $answer =~ [Nn] ]]; then
		defaultYes=false
		options='y/N'
	else
		options='Y/n'
	fi
	read -n1 -p "${prompt} (${options}) ";
	if [[ $defaultYes == true ]]; then
		[[ -z $REPLY || $REPLY =~ [Yy] ]];
		return
	else
		[[ $REPLY =~ [Yy] ]];
		return
	fi
}

initializeSumCommand() {
	# NOTE: Each command MUST support the '-c SUMFILE' option.
	opt_algorithm="$(echo "$opt_algorithm" | toLowerCase)";
	case $opt_algorithm in
		sha*) sumCommand=(sha256sum);
			if ! command -v sha256sum &>/dev/null; then
				if command -v shasum &>/dev/null; then
					sumCommand=(shasum -a 256);
				else
					die "Missing checksum software: sha256sum or shasum.";
				fi
			fi
			;;
		b2*|blake*) sumCommand=(b2sum);;
		*) die "Unknown sum algorithm '${opt_algorithm}'.";;
	esac
	if command -v "${sumCommand[0]}" &>/dev/null; then
		whisper 1 "Using $(which "${sumCommand[0]}")";
	else
		die "Missing checksum software: ${sumCommand[0]}.";
	fi
}

getSumFile() {
	local match;
	match="$(ls -1t .*SUM* 2>/dev/null)" \
		|| match="$(ls -t *SUM* 2>/dev/null)" \
		|| return $?;

	echo -en "$match" | head -1
}

describeSumFile() {
	local sumfile="$1"
	local fileCount="$(grep -Ecv '^\s*(#.*)\s*$' "$sumfile")"
	local dirCount="$(grep -Ec '^[a-f0-9]+  .*/' "$sumfile")"

	local description="${fileCount} files"

	if [[ $dirCount -gt 0 ]]; then
		description+="; descends into directories"
	fi

	echo -n "$description"
}

## Giving it a descriptive name, because (with option -e) it shows up in the "full" output to an
## interactive shell.
checkdir_doPathsInSumFileExist() {
	local sumFile="$1"; shift;
	local numTotal=0 numPresent=0 numMissing=0;
	local exitStatus=0;

	whisper 2 "About to read sumfile(${sumFile}) line by line in Bash.";
	local hash path;
	while read hash path; do
		if [[ -z $hash || -z "$path" || $hash =~ ^[[:space:]]*# ]]; then
			whisper 2 "Skipping commented line: ${hash} ${path}";
			continue;
		fi;

		let numTotal++;
		if [[ -e "$path" ]]; then
			let numPresent++;
			echo "EXISTS: ${path}";
		else
			let numMissing++;
			exitStatus=1;
			echo "MISSING: ${path}";
		fi
	done <"$sumFile"

	if [[ $numMissing -gt 0 ]]; then
		yell "Missing ${numMissing} files.";
	fi

	return $exitStatus;
}

main() {
	local sumFile="$1";
	if [[ -z "$sumFile" ]]; then
		sumFile="$(getSumFile)" || die "No hash file to check against. Run sumdir to make one.";
	fi

	if [[ $sumFile =~ [bB]2 ]]; then
		opt_algorithm=b2;
	else
		opt_algorithm=sha256;
	fi

	checkOutputCacheFile="${TMPDIR}/.checking.${sumFile}.${RANDOM}.log";
	yell "Checking files against $sumFile ($(describeSumFile "$sumFile"))";

	## PREPARING EXECUTION:
	checkCommand=();
	if [[ $opt_check_exists_only != 'true' ]]; then
		initializeSumCommand;
		checkCommand+=("${sumCommand[@]}" -c "$sumFile");
	else
		checkCommand+=(checkdir_doPathsInSumFileExist "$sumFile");
	fi

	## EXECUTION:
	checkOutput="$("${checkCommand[@]}")";
	checkStatus=$?;

	## HANDLE OUTPUT:
	if echo "$checkOutput" \
		| tee "${checkOutputCacheFile}" \
		| grep 'FAILED\|MISSING'; then
		yell "";
		yell "(Showing only failures…)";
		[[ -t 0 ]] \
			&& confirm "See full output?" 'n' \
			&& cat <(echo "### output from '${checkCommand[*]}':") "$checkOutputCacheFile" <(echo -e "\n### sum file data being checked:") "$sumFile" | less
	elif [[ $checkStatus != 0 ]]; then
		yell "✗ Finished with problems.";
	else
		yell "✓ All OK";
	fi

	[[ -e "$checkOutputCacheFile" ]] && rm "$checkOutputCacheFile"

	return $checkStatus;
}



## EXECUTION:

opt_algorithm=sha256;
opt_check_exists_only=false;
opt_verbose=0;
sumCommand=();
sumFileArgs=();

while [[ $# -gt 0 ]]; do
	case $1 in
		--help|help|-h) showHelp; exit;;
		-a) opt_algorithm="$2"; shift;;
		-e) opt_check_exists_only=true;;
		-l) getSumFile; exit;;
		-v) let opt_verbose++;;
		--version) echo "v${SCRIPT_VERSION%%  *} ($0)"; exit;;
		*) sumFileArgs+=("$1");;
	esac
	shift;
done

main "${sumFileArgs[@]}";

exit;

## [sumthis (omitting comments)](data:text/x-shellscript,data%3D%22$%28grep%20-v%20%27^%5Cs*$%5C|^%5Cs*%23%5C|%23%5B^%23%5D*volatile%5B^%23%5D*$%27%20./checkdir%29%22%3B%0Asum%3D%22$%28b2sum%20-l%20128%20%3C%28echo%20%22$data%22%29%20|%20awk%20%27{%20print%20$1%20}%27%29%22%3B%0Asize%3D%28$%28echo%20%22$data%22%20|%20wc%20-c%29%29%3B%0Aecho%20%22b2sum%3A${sum}%2Csize%3A${size%5B0%5D}%22%3B%0A "date-modified=20221213T100856-08")
